import java.util.*;

public class FileSystem {
	class File{
		boolean isFile=false;
		Map<String, File> children=new HashMap<>();
		String content="";
	}
	File root=null;
	public FileSystem(){
		root=new File();
	}
	
	public List<String> ls(String path){
		List<String> res=new ArrayList<>();
		String name="";
		File node=root;
		String[] dirs=path.split("/");
		for(String dir:dirs){
			if(dir.length()==0) continue;
			if(!node.children.containsKey(dir)){
			   return res;
			}
			node=node.children.get(dir);
			name=dir;
		}
		if(node.isFile){
			res.add(name);
		}else{
			for(String key:node.children.keySet()){
				res.add(key);
			}
		}
		return res;
	} 
	
	public void mkdir(String path){
		String[] dirs=path.split("/");
		File node=root;
		for(String dir:dirs){
			if(dir.length()==0) continue;
			if(!node.children.containsKey(dir)){
			   File file=new File();
			   node.children.put(dir, file);
			}
			node=node.children.get(dir);
		}
	}
	public void addContentToFile(String filePath, String content){
		String[] dirs=filePath.split("/");
		File node=root;
		for(String dir:dirs){
			if(dir.length()==0) continue;
			if(!node.children.containsKey(dir)){
			   File file=new File();
			   node.children.put(dir, file);
			}
			node=node.children.get(dir);
		}
		node.isFile=true;
		node.content+=content;
	}
	public String readContentFromFile(String filePath){
		String[] dirs=filePath.split("/");
		File node=root;
		for(String dir:dirs){
			if(dir.length()==0) continue;
			if(!node.children.containsKey(dir)){
			   File file=new File();
			   node.children.put(dir, file);
			}
			node=node.children.get(dir);
		}
		return node.content;
	}
	public static void main(String[] args){
		FileSystem fs=new FileSystem();
		fs.ls("/");
		fs.mkdir("/a/b/c");
		fs.addContentToFile("/a/b/c/d", "hello");
		fs.ls("/");
		System.out.println(fs.readContentFromFile("/a/b/c/d"));
	}
}
